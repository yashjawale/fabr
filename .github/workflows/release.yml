name: Release

on:
 push:
  tags:
   - 'v*.*.*'
 workflow_dispatch:
  inputs:
   version:
    description: 'Version to release (e.g., 1.0.0)'
    required: true
    type: string
   dry_run:
    description: 'Dry run (skip npm publish and GitHub release)'
    required: false
    type: boolean
    default: false

permissions:
 contents: write
 id-token: write

jobs:
 release:
  runs-on: ubuntu-latest
  steps:
   - name: Checkout code
     uses: actions/checkout@v4
     with:
      fetch-depth: 0

   - name: Setup Node.js
     uses: actions/setup-node@v4
     with:
      node-version: '20'
      cache: 'npm'
      registry-url: 'https://registry.npmjs.org'

   - name: Install dependencies
     run: npm ci

   - name: Run validation
     run: |
      npm run lint
      npm run format:check
      npm run typecheck
      npm run build

   - name: Test CLI functionality
     run: |
      node dist/index.js --help
      node dist/index.js list

   - name: Determine version and mode
     id: version
     run: |
      if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
        # Manual dispatch - we'll do everything: update version, tag, publish, release
        VERSION="${{ github.event.inputs.version }}"
        echo "version=v${VERSION}" >> $GITHUB_OUTPUT
        echo "clean_version=${VERSION}" >> $GITHUB_OUTPUT
        echo "is_manual=true" >> $GITHUB_OUTPUT
        echo "should_publish=${{ github.event.inputs.dry_run != 'true' }}" >> $GITHUB_OUTPUT
      else
        # Tag push - extract version and publish
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "clean_version=${VERSION#v}" >> $GITHUB_OUTPUT
        echo "is_manual=false" >> $GITHUB_OUTPUT
        echo "should_publish=true" >> $GITHUB_OUTPUT
      fi

   - name: Update package.json version (manual dispatch only)
     if: steps.version.outputs.is_manual == 'true'
     run: |
      sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"${{ steps.version.outputs.clean_version }}\"/g" package.json
      git config --local user.email "action@github.com"
      git config --local user.name "GitHub Action"

   - name: Commit version bump and create tag (manual dispatch only)
     if: steps.version.outputs.is_manual == 'true' && steps.version.outputs.should_publish == 'true'
     run: |
      git add package.json
      git commit -m "🔖 Release v${{ steps.version.outputs.clean_version }}"

      # Delete existing tag if it exists (locally and remotely)
      if git tag -l | grep -q "^v${{ steps.version.outputs.clean_version }}$"; then
        git tag -d v${{ steps.version.outputs.clean_version }}
        git push origin :refs/tags/v${{ steps.version.outputs.clean_version }} || true
      fi

      # Create new tag
      git tag v${{ steps.version.outputs.clean_version }}

      # Push commit and tag
      git push origin HEAD:main
      git push origin v${{ steps.version.outputs.clean_version }}

   - name: Generate changelog
     if: steps.version.outputs.should_publish == 'true'
     id: changelog
     run: |
      # Get the previous tag
      PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

      # Generate changelog
      if [ -n "$PREV_TAG" ]; then
        echo "## Changes since $PREV_TAG" > CHANGELOG.md
        git log $PREV_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges >> CHANGELOG.md
      else
        echo "## Initial Release" > CHANGELOG.md
        echo "- First release of Fabr CLI" >> CHANGELOG.md
      fi

      # Output changelog for GitHub release
      {
        echo 'changelog<<EOF'
        cat CHANGELOG.md
        echo EOF
      } >> $GITHUB_OUTPUT

   - name: Prepare package for publishing
     if: steps.version.outputs.should_publish == 'true'
     run: |
      mkdir -p publish
      cp -r dist/* publish/
      cp package.json publish/
      cp README.md publish/
      cp LICENSE publish/

   - name: Publish to npm
     if: steps.version.outputs.should_publish == 'true'
     run: |
      cd publish
      npm publish --provenance
     env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

   - name: Create GitHub Release
     if: steps.version.outputs.should_publish == 'true'
     run: |
      # Create release body
      cat > release_body.md << 'EOF'
      ## 🚀 Fabr ${{ steps.version.outputs.version }}

      ${{ steps.changelog.outputs.changelog }}

      ### 📦 Installation
      ```bash
      npm install -g fabr@${{ steps.version.outputs.clean_version }}
      ```

      ### 🔗 Links
      - [npm package](https://www.npmjs.com/package/fabr/v/${{ steps.version.outputs.clean_version }})
      - [Documentation](https://yashjawale.github.io/fabr/)
      EOF

      # Create release with gh CLI
      PRERELEASE_FLAG=""
      if [[ "${{ steps.version.outputs.version }}" == *"alpha"* ]] || [[ "${{ steps.version.outputs.version }}" == *"beta"* ]] || [[ "${{ steps.version.outputs.version }}" == *"rc"* ]]; then
        PRERELEASE_FLAG="--prerelease"
      fi

      gh release create ${{ steps.version.outputs.version }} \
        --title "Release ${{ steps.version.outputs.version }}" \
        --notes-file release_body.md \
        $PRERELEASE_FLAG
     env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

   - name: Release Status
     run: |
      if [ "${{ steps.version.outputs.is_manual }}" = "true" ]; then
        if [ "${{ steps.version.outputs.should_publish }}" = "true" ]; then
          echo "✅ Complete release process finished successfully!"
          echo "🔖 Version bumped to v${{ steps.version.outputs.clean_version }}"
          echo "🏷️ Tag v${{ steps.version.outputs.clean_version }} created and pushed"
          echo "📦 Package published to npm: https://www.npmjs.com/package/fabr"
          echo "🎉 GitHub release created: https://github.com/yashjawale/fabr/releases/tag/${{ steps.version.outputs.version }}"
        else
          echo "✅ Dry run completed successfully!"
          echo "🔍 Version would be bumped to v${{ steps.version.outputs.clean_version }}"
          echo "⏭️ No actual publishing or tagging performed"
        fi
      else
        echo "✅ Tag-triggered release completed successfully!"
        echo "📦 Package published to npm: https://www.npmjs.com/package/fabr"
        echo "🎉 GitHub release created: https://github.com/yashjawale/fabr/releases/tag/${{ steps.version.outputs.version }}"
      fi
