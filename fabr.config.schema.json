{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"title": "Fabr Configuration",
	"description": "Configuration file for Fabr project templates",
	"type": "object",
	"properties": {
		"$schema": {
			"type": "string",
			"description": "JSON Schema reference"
		},
		"name": {
			"type": "string",
			"description": "The name of the template configuration"
		},
		"description": {
			"type": "string",
			"description": "A brief description of what this template creates"
		},
		"version": {
			"type": "string",
			"description": "Version of the template configuration",
			"pattern": "^\\d+\\.\\d+\\.\\d+$"
		},
		"type": {
			"type": "string",
			"enum": ["files", "commands"],
			"default": "files",
			"description": "Template type: 'files' for traditional file-based templates or 'commands' for command-based templates"
		},
		"preSetupCommand": {
			"type": "string",
			"description": "Command to run before any setup tasks (e.g., 'echo \"Starting setup...\"')"
		},
		"postSetupCommand": {
			"type": "string",
			"description": "Command to run after placeholder replacement (e.g., 'chmod +x scripts/*')"
		},
		"installCommand": {
			"type": "string",
			"description": "Command to install dependencies (e.g., 'npm install', 'yarn install', 'composer install')",
			"default": "npm install"
		},
		"postInstallCommand": {
			"type": "string",
			"description": "Command to run after dependency installation (e.g., 'npm run build', 'git init')"
		},
		"placeholders": {
			"type": "array",
			"description": "Array of placeholder configurations for template customization",
			"items": {
				"$ref": "#/definitions/placeholder"
			}
		},
		"environmentVariables": {
			"type": "array",
			"description": "Array of environment variable configurations for .env file generation",
			"items": {
				"$ref": "#/definitions/environmentVariable"
			}
		},
		"files": {
			"type": "object",
			"description": "File-specific configurations",
			"properties": {
				"ignore": {
					"type": "array",
					"description": "Array of file patterns to ignore during placeholder replacement",
					"items": {
						"type": "string"
					},
					"examples": [["node_modules/**", "*.jpg", "*.png", "*.gif", "*.svg"]]
				},
				"include": {
					"type": "array",
					"description": "Array of file patterns to specifically include for placeholder replacement",
					"items": {
						"type": "string"
					},
					"examples": [["**/*.js", "**/*.ts", "**/*.json", "**/*.md"]]
				}
			}
		},
		"gitInit": {
			"type": "boolean",
			"description": "Whether to initialize a git repository after setup",
			"default": false
		},
		"removeFiles": {
			"type": "array",
			"description": "Array of file patterns to remove after setup completion",
			"items": {
				"type": "string"
			},
			"examples": [["fabr.config.json", "README.template.md"]]
		},
		"commands": {
			"type": "array",
			"description": "Array of commands to run for command-based templates",
			"items": {
				"$ref": "#/definitions/commandTemplate"
			}
		}
	},
	"definitions": {
		"placeholder": {
			"type": "object",
			"description": "Configuration for a single placeholder",
			"properties": {
				"key": {
					"type": "string",
					"description": "The placeholder key (e.g., 'PROJECT_NAME', 'AUTHOR_NAME')",
					"pattern": "^[A-Z_][A-Z0-9_]*$"
				},
				"prompt": {
					"type": "string",
					"description": "The message to show when prompting for this value"
				},
				"description": {
					"type": "string",
					"description": "Additional description or help text for this placeholder"
				},
				"default": {
					"type": "string",
					"description": "Default value for this placeholder"
				},
				"required": {
					"type": "boolean",
					"description": "Whether this placeholder is required",
					"default": true
				},
				"transform": {
					"type": "object",
					"description": "Transform this placeholder's value from another placeholder",
					"properties": {
						"source": {
							"type": "string",
							"description": "The source placeholder key to transform from"
						},
						"case": {
							"type": "string",
							"enum": ["kebab", "pascal", "camel", "snake", "constant"],
							"description": "The case transformation to apply"
						}
					},
					"required": ["source", "case"],
					"additionalProperties": false
				},
				"defaultCase": {
					"type": "object",
					"description": "Generate a default value by transforming another placeholder",
					"properties": {
						"source": {
							"type": "string",
							"description": "The source placeholder key to transform from"
						},
						"case": {
							"type": "string",
							"enum": ["kebab", "pascal", "camel", "snake", "constant"],
							"description": "The case transformation to apply"
						},
						"template": {
							"type": "string",
							"description": "Template string where {value} will be replaced with the transformed value"
						}
					},
					"required": ["source", "case"],
					"additionalProperties": false
				},
				"validate": {
					"type": "object",
					"description": "Validation rules for this placeholder",
					"properties": {
						"pattern": {
							"type": "string",
							"description": "Regular expression pattern that the value must match"
						},
						"minLength": {
							"type": "integer",
							"description": "Minimum length of the value",
							"minimum": 0
						},
						"maxLength": {
							"type": "integer",
							"description": "Maximum length of the value",
							"minimum": 1
						}
					},
					"additionalProperties": false
				}
			},
			"required": ["key"],
			"oneOf": [
				{
					"required": ["prompt"]
				},
				{
					"required": ["transform"]
				}
			],
			"additionalProperties": false
		},
		"environmentVariable": {
			"type": "object",
			"description": "Configuration for a single environment variable",
			"properties": {
				"key": {
					"type": "string",
					"description": "The environment variable name (e.g., 'DATABASE_URL', 'API_KEY')",
					"pattern": "^[A-Z_][A-Z0-9_]*$"
				},
				"prompt": {
					"type": "string",
					"description": "The message to show when prompting for this value"
				},
				"description": {
					"type": "string",
					"description": "Additional description or help text for this environment variable"
				},
				"default": {
					"type": "string",
					"description": "Default value for this environment variable"
				},
				"required": {
					"type": "boolean",
					"description": "Whether this environment variable is required",
					"default": false
				},
				"local": {
					"type": "boolean",
					"description": "Whether this should be saved to .env.local instead of .env (for sensitive values)",
					"default": false
				},
				"transform": {
					"type": "object",
					"description": "Transform this environment variable's value from a placeholder",
					"properties": {
						"source": {
							"type": "string",
							"description": "The source placeholder key to transform from"
						},
						"case": {
							"type": "string",
							"enum": ["kebab", "pascal", "camel", "snake", "constant"],
							"description": "The case transformation to apply"
						}
					},
					"required": ["source", "case"],
					"additionalProperties": false
				},
				"defaultCase": {
					"type": "object",
					"description": "Generate a default value by transforming a placeholder",
					"properties": {
						"source": {
							"type": "string",
							"description": "The source placeholder key to transform from"
						},
						"case": {
							"type": "string",
							"enum": ["kebab", "pascal", "camel", "snake", "constant"],
							"description": "The case transformation to apply"
						},
						"template": {
							"type": "string",
							"description": "Template string where {value} will be replaced with the transformed value"
						}
					},
					"required": ["source", "case"],
					"additionalProperties": false
				},
				"validate": {
					"type": "object",
					"description": "Validation rules for this environment variable",
					"properties": {
						"pattern": {
							"type": "string",
							"description": "Regular expression pattern that the value must match"
						},
						"minLength": {
							"type": "integer",
							"minimum": 0,
							"description": "Minimum length of the value"
						},
						"maxLength": {
							"type": "integer",
							"minimum": 1,
							"description": "Maximum length of the value"
						}
					},
					"additionalProperties": false
				}
			},
			"required": ["key"],
			"oneOf": [
				{
					"required": ["prompt"]
				},
				{
					"required": ["transform"]
				}
			],
			"additionalProperties": false
		},
		"commandTemplate": {
			"type": "object",
			"description": "Configuration for a single command in a command-based template",
			"properties": {
				"command": {
					"type": "string",
					"description": "The shell command to execute (supports placeholder replacement with {{PLACEHOLDER_NAME}})"
				},
				"description": {
					"type": "string",
					"description": "Human-readable description of what this command does"
				},
				"workingDirectory": {
					"type": "string",
					"description": "Working directory for this command (relative to project root)"
				},
				"showOutput": {
					"type": "boolean",
					"default": true,
					"description": "Whether to show command output to the user"
				}
			},
			"required": ["command"],
			"additionalProperties": false
		}
	},
	"additionalProperties": false,
	"examples": [
		{
			"name": "React TypeScript Template",
			"description": "A modern React application with TypeScript and Vite",
			"version": "1.0.0",
			"type": "files",
			"preSetupCommand": "echo 'Setting up React TypeScript project...'",
			"installCommand": "npm install",
			"postInstallCommand": "npm run build && git init",
			"gitInit": true,
			"placeholders": [
				{
					"key": "PROJECT_NAME",
					"prompt": "What is your project name?",
					"description": "This will be used as the package name and folder name",
					"validate": {
						"pattern": "^[a-z][a-z0-9-]*$",
						"minLength": 3,
						"maxLength": 50
					}
				},
				{
					"key": "PROJECT_TITLE",
					"prompt": "What is the display title for your project?",
					"description": "This will be shown in the app header and README"
				},
				{
					"key": "AUTHOR_NAME",
					"prompt": "What is your name?",
					"description": "This will be used in package.json and license"
				},
				{
					"key": "PROJECT_NAME_PASCAL",
					"transform": {
						"source": "PROJECT_NAME",
						"case": "pascal"
					}
				},
				{
					"key": "COMPONENT_NAME",
					"defaultCase": {
						"source": "PROJECT_NAME",
						"case": "pascal",
						"template": "{value}App"
					},
					"prompt": "What should the main component be called?"
				}
			],
			"files": {
				"ignore": ["node_modules/**", "dist/**", "*.jpg", "*.png", "*.gif", "*.svg"],
				"include": ["**/*.js", "**/*.ts", "**/*.tsx", "**/*.json", "**/*.md", "**/*.html"]
			},
			"removeFiles": ["fabr.config.json"]
		},
		{
			"name": "Node.js Project Setup",
			"description": "Command-based template that sets up a Node.js project structure",
			"version": "1.0.0",
			"type": "commands",
			"placeholders": [
				{
					"key": "PROJECT_NAME",
					"prompt": "What is your project name?",
					"description": "The name of your Node.js project",
					"required": true,
					"validate": {
						"pattern": "^[a-z][a-z0-9-]*$",
						"minLength": 3,
						"maxLength": 50
					}
				},
				{
					"key": "AUTHOR_NAME",
					"prompt": "What is your name?",
					"description": "Project author name",
					"required": true
				},
				{
					"key": "DESCRIPTION",
					"prompt": "Project description",
					"description": "Brief description of your project",
					"default": "A new Node.js project"
				},
				{
					"key": "VERSION",
					"prompt": "Initial version",
					"description": "Starting version number",
					"default": "1.0.0"
				}
			],
			"commands": [
				{
					"command": "npm init -y",
					"description": "Initialize package.json",
					"showOutput": false
				},
				{
					"command": "npm pkg set name={{PROJECT_NAME}}",
					"description": "Set project name in package.json"
				},
				{
					"command": "npm pkg set description='{{DESCRIPTION}}'",
					"description": "Set project description"
				},
				{
					"command": "npm pkg set version={{VERSION}}",
					"description": "Set project version"
				},
				{
					"command": "npm pkg set author='{{AUTHOR_NAME}}'",
					"description": "Set project author"
				},
				{
					"command": "mkdir -p src docs tests",
					"description": "Create project directories"
				},
				{
					"command": "echo 'console.log(\"Hello from {{PROJECT_NAME}}!\");' > src/index.js",
					"description": "Create main entry file"
				},
				{
					"command": "echo '# {{PROJECT_NAME}}\\n\\n{{DESCRIPTION}}\\n\\nBy {{AUTHOR_NAME}}' > README.md",
					"description": "Create README file"
				},
				{
					"command": "npm pkg set main=src/index.js",
					"description": "Set main entry point"
				},
				{
					"command": "npm pkg set scripts.start='node src/index.js'",
					"description": "Add start script"
				},
				{
					"command": "npm pkg set scripts.test='echo \"Error: no test specified\" && exit 1'",
					"description": "Add test script placeholder"
				},
				{
					"command": "npm install --save-dev nodemon",
					"description": "Install development dependencies",
					"showOutput": true
				},
				{
					"command": "npm pkg set scripts.dev='nodemon src/index.js'",
					"description": "Add development script"
				}
			]
		}
	]
}
